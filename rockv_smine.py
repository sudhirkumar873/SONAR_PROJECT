# -*- coding: utf-8 -*-
"""ROCKV/SMINE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BK8N2IEGTnU29GVAodhHnyctqLS9psSz

IMPORTING THE DEPENDENCIES
"""

#IMPORTING LIBRARIES
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""DATA COLLECTION AND PROCESSING"""

#loading the dataset to pandas dataframe
sonar_data = pd.read_csv('/content/sonar data.csv', header = None)

sonar_data.head()

#finding the number of rows and coloumns
sonar_data.shape

sonar_data.describe #describe the statistical measure of the data

sonar_data[60].value_counts()



"""M---> MINE
R---> ROCK
"""

sonar_data.groupby(60).mean()

#seperating data and labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape,X_test.shape)

print(X.shape, X_train.shape, X_test.shape)

#model training to logistical regression
print(X_train)
print(X_test)

model =  LogisticRegression()

model.fit(X_train, Y_train)

#model evaluation
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data: ',training_data_accuracy)

#model evaluation
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data: ',test_data_accuracy)

input_data = (0.0099,0.0484,0.0299,0.0297,0.0652,0.1077,0.2363,0.2385,0.0075,0.1882,0.1456,0.1892,0.3176,0.1340,0.2169,0.2458,0.2589,0.2786,0.2298,0.0656,0.1441,0.1179,0.1668,0.1783,0.2476,0.2570,0.1036,0.5356,0.7124,0.6291,0.4756,0.6015,0.7208,0.6234,0.5725,0.7523,0.8712,0.9252,0.9709,0.9297,0.8995,0.7911,0.5600,0.2838,0.4407,0.5507,0.4331,0.2905,0.1981,0.0779,0.0396,0.0173,0.0149,0.0115,0.0202,0.0139,0.0029,0.0160,0.0106,0.0134)
#Changing input to a numpy array
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
  print('The Object is a ROCK')
else:
  print('The Object is a MINE')

